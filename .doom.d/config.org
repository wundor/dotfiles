#+title: Config

* Foundation
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "WundoR"
      user-mail-address "wundor@testchamber.one")
#+end_src

* UI
** Eyecandy
Increase interface size. I don't use it now because I have issues with it not evaluating at start for some reason
#+begin_src emacs-lisp :tangle yes
;; (after! doom-themes
;; (set-face-attribute 'default nil :height 150)
;; )
#+end_src

Fix modeline cut off. Not needed ATM because I'm not using interface size increase
#+begin_src emacs-lisp :tangle yes
;; (after! doom-modeline
;;   (doom-modeline-def-modeline 'main
;;     '(bar matches buffer-info remote-host buffer-position parrot selection-info)
;;     '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs "                    "))) ; <-- added padding here
#+end_src

Theme
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-nord)
#+end_src

Transparency
#+begin_src emacs-lisp :tangle yes
(set-frame-parameter (selected-frame)'alpha '(95 . 95))
(add-to-list 'default-frame-alist'(alpha . (95 . 95)))
#+end_src

Default font
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Iosevka" :size 20 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 21)
      doom-big-font (font-spec :family "Iosevka" :size 34))
#+end_src

Add support for italics
#+begin_src emacs-lisp :tangle yes
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Interface
Set line numbers
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

Vim scrolloff (sort of)
#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 10)
#+end_src


Save buffers on focus change
#+begin_src emacs-lisp :tangle yes
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+end_src

Save buffers when leaving insert mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'evil-insert-state-exit-hook (lambda () (save-some-buffers t)))
#+end_src

** Editor
Prompt for file selector when openins split
#+begin_src emacs-lisp :tangle yes
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src
* Extensions
** org mode
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/git/space/")
(after! org
  (setq org-agenda-files (directory-files-recursively "~/git/space" "\\.org$"))
  ;; (setq org-agenda-files (ignore-errors (directory-files +org-dir t "\\.org$" t)))
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-graph-column 65)
#+end_src
*** org-super-agenda
#+begin_src emacs-lisp :tangle yes
(org-super-agenda-mode)

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-span 1
      org-agenda-start-on-weekday nil)

(setq org-agenda-custom-commands
      '(("z" "Super view"
         ((agenda "" ((org-agenda-overriding-header "")
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :order 1)
                         ))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '(
                          (:log t)
                          (:name "WEEK"
                           :property ("scope" "WEEK")
                           :order 2)
                          (:name "MONTH"
                           :property ("scope" "MONTH")
                           :order 3)
                          (:name "YEAR"
                           :property ("scope" "YEAR")
                           :order 4)
                          ))))
          ))))
#+end_src

** org roam
#+begin_src emacs-lisp :tangle yes
(setq org-roam-directory "~/git/space/")
#+end_src

For better export
#+begin_src emacs-lisp :tangle yes
(require 'org-roam-export)
#+end_src

*** org roam ui
https://github.com/org-roam/org-roam-ui
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** calendar
Custom function to view org calendar + calendars from iCalendar
https://cyberchris.xyz/posts/ical-doom-emacs/
#+begin_src emacs-lisp :tangle yes
(defun calendar-helper () ;; doesn't have to be interactive
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "White")
    (cfw:ical-create-source "Праздники" "https://calendar.google.com/calendar/ical/ru.russian%23holiday%40group.v.calendar.google.com/public/basic.ics" "Green")
    (cfw:ical-create-source "WORK" "https://outlook.office365.com/owa/calendar/bf27cd7a8e5641539bc7a06ac19b82fd@orioninc.com/84df9ea52130447b9c6e7313c391fab19555198356456158305/S-1-8-1214364109-2325842782-3623989374-2310379573/reachcalendar.ics" "Purple")
    )))
(defun calendar-init ()
  ;; switch to existing calendar buffer if applicable
  (if-let (win (cl-find-if (lambda (b) (string-match-p "^\\*cfw:" (buffer-name b)))
                           (doom-visible-windows)
                           :key #'window-buffer))
      (select-window win)
    (calendar-helper)))
(defun =my-calendar ()
  "Activate (or switch to) *my* `calendar' in its workspace."
  (interactive)
  (if (featurep! :ui workspaces) ;; create workspace (if enabled)
      (progn
        (+workspace-switch "Calendar" t)
        (doom/switch-to-scratch-buffer)
        (calendar-init)
        (+workspace/display))
    (setq +calendar--wconf (current-window-configuration))
    (delete-other-windows)
    (switch-to-buffer (doom-fallback-buffer))
    (calendar-init)))
#+end_src

Start week from Monday
#+begin_src emacs-lisp :tangle yes
(setq calendar-week-start-day 1)
#+end_src

Disable default holidays
#+begin_src emacs-lisp :tangle yes
(setq calendar-holidays nil)
#+end_src

** journaling
I use org-journal and org-roam-dailies in the same directory
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-date-format "%Y-%m-%d")
  ;; (add-to-list 'org-agenda-files org-journal-dir)
  ;; (setq org-journal-enable-agenda-integration t)

  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %<%H:%M> %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))
  )
#+end_src

** beancount
#+begin_src emacs-lisp :tangle yes
(setq beancount-number-alignment-column 60)
(setq lsp-beancount-langserver-executable "~/.cargo/bin/beancount-language-server")
(setq lsp-beancount-journal-file "~/git/space/ledger/current.beancount")
#+end_src
